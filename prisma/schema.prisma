// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Developer {
  id        String        @id @default(cuid())
  key       String
  createdAt DateTime      @default(now())
  name      String
  avatar    String
  drafts    DraftPlugin[]
}

model DraftPlugin {
  id          String       @id @default(cuid())
  name        String
  description String
  icon        String
  date        DateTime     @default(now())
  status      PluginStatus @default(Pending)
  author      Developer    @relation(fields: [authorId], references: [id])
  authorId    String
}

enum PluginStatus {
  Private
  Rejected
  Pending
}

//model AdminAccount {
//  id                 String  @id @default(cuid())
//  userId             String
//  type               String
//  provider           String
//  providerAccountId  String
//  refresh_token      String?
//  access_token       String?
//  expires_at         Int?
//  token_type         String?
//  scope              String?
//  id_token           String?
//  session_state      String?
//  oauth_token_secret String?
//  oauth_token        String?
//
//  user AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//  @@unique([provider, providerAccountId])
//}

model AdminSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         AdminUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
//  accounts      AdminAccount[]
  sessions      AdminSession[]
}

model AdminVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
